# coding: utf-8

"""
    Most Popular

    Provides services for getting the most popular articles on NYTimes.com based on emails, shares, or views.  Get most emailed articles for the last day: ``` /emailed/1.json ```  Get most shared articles on Facebook for the last day: ``` /shared/1/facebook.json ```  Get most viewed articles for the last seven days: ``` /viewed/7.json ```  ## Example Calls ``` https://api.nytimes.com/svc/mostpopular/v2/emailed/7.json?api-key=yourkey ```  ``` https://api.nytimes.com/svc/mostpopular/v2/shared/1/facebook.json?api-key=yourkey ```  ``` https://api.nytimes.com/svc/mostpopular/v2/viewed/1.json?api-key=yourkey ``` 

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ViewedArticle(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, url=None, adx_keywords=None, column=None, section=None, byline=None, type=None, title=None, abstract=None, published_date=None, source=None, id=None, asset_id=None, views=None, des_facet=None, org_facet=None, per_facet=None, geo_facet=None, media=None, uri=None):
        """
        ViewedArticle - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'url': 'str',
            'adx_keywords': 'str',
            'column': 'str',
            'section': 'str',
            'byline': 'str',
            'type': 'str',
            'title': 'str',
            'abstract': 'str',
            'published_date': 'str',
            'source': 'str',
            'id': 'int',
            'asset_id': 'int',
            'views': 'int',
            'des_facet': 'list[str]',
            'org_facet': 'list[str]',
            'per_facet': 'list[str]',
            'geo_facet': 'list[str]',
            'media': 'list[Media]',
            'uri': 'str'
        }

        self.attribute_map = {
            'url': 'url',
            'adx_keywords': 'adx_keywords',
            'column': 'column',
            'section': 'section',
            'byline': 'byline',
            'type': 'type',
            'title': 'title',
            'abstract': 'abstract',
            'published_date': 'published_date',
            'source': 'source',
            'id': 'id',
            'asset_id': 'asset_id',
            'views': 'views',
            'des_facet': 'des_facet',
            'org_facet': 'org_facet',
            'per_facet': 'per_facet',
            'geo_facet': 'geo_facet',
            'media': 'media',
            'uri': 'uri'
        }

        self._url = url
        self._adx_keywords = adx_keywords
        self._column = column
        self._section = section
        self._byline = byline
        self._type = type
        self._title = title
        self._abstract = abstract
        self._published_date = published_date
        self._source = source
        self._id = id
        self._asset_id = asset_id
        self._views = views
        self._des_facet = des_facet
        self._org_facet = org_facet
        self._per_facet = per_facet
        self._geo_facet = geo_facet
        self._media = media
        self._uri = uri

    @property
    def url(self):
        """
        Gets the url of this ViewedArticle.


        :return: The url of this ViewedArticle.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this ViewedArticle.


        :param url: The url of this ViewedArticle.
        :type: str
        """

        self._url = url

    @property
    def adx_keywords(self):
        """
        Gets the adx_keywords of this ViewedArticle.


        :return: The adx_keywords of this ViewedArticle.
        :rtype: str
        """
        return self._adx_keywords

    @adx_keywords.setter
    def adx_keywords(self, adx_keywords):
        """
        Sets the adx_keywords of this ViewedArticle.


        :param adx_keywords: The adx_keywords of this ViewedArticle.
        :type: str
        """

        self._adx_keywords = adx_keywords

    @property
    def column(self):
        """
        Gets the column of this ViewedArticle.


        :return: The column of this ViewedArticle.
        :rtype: str
        """
        return self._column

    @column.setter
    def column(self, column):
        """
        Sets the column of this ViewedArticle.


        :param column: The column of this ViewedArticle.
        :type: str
        """

        self._column = column

    @property
    def section(self):
        """
        Gets the section of this ViewedArticle.


        :return: The section of this ViewedArticle.
        :rtype: str
        """
        return self._section

    @section.setter
    def section(self, section):
        """
        Sets the section of this ViewedArticle.


        :param section: The section of this ViewedArticle.
        :type: str
        """

        self._section = section

    @property
    def byline(self):
        """
        Gets the byline of this ViewedArticle.


        :return: The byline of this ViewedArticle.
        :rtype: str
        """
        return self._byline

    @byline.setter
    def byline(self, byline):
        """
        Sets the byline of this ViewedArticle.


        :param byline: The byline of this ViewedArticle.
        :type: str
        """

        self._byline = byline

    @property
    def type(self):
        """
        Gets the type of this ViewedArticle.


        :return: The type of this ViewedArticle.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this ViewedArticle.


        :param type: The type of this ViewedArticle.
        :type: str
        """

        self._type = type

    @property
    def title(self):
        """
        Gets the title of this ViewedArticle.


        :return: The title of this ViewedArticle.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this ViewedArticle.


        :param title: The title of this ViewedArticle.
        :type: str
        """

        self._title = title

    @property
    def abstract(self):
        """
        Gets the abstract of this ViewedArticle.


        :return: The abstract of this ViewedArticle.
        :rtype: str
        """
        return self._abstract

    @abstract.setter
    def abstract(self, abstract):
        """
        Sets the abstract of this ViewedArticle.


        :param abstract: The abstract of this ViewedArticle.
        :type: str
        """

        self._abstract = abstract

    @property
    def published_date(self):
        """
        Gets the published_date of this ViewedArticle.


        :return: The published_date of this ViewedArticle.
        :rtype: str
        """
        return self._published_date

    @published_date.setter
    def published_date(self, published_date):
        """
        Sets the published_date of this ViewedArticle.


        :param published_date: The published_date of this ViewedArticle.
        :type: str
        """

        self._published_date = published_date

    @property
    def source(self):
        """
        Gets the source of this ViewedArticle.


        :return: The source of this ViewedArticle.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """
        Sets the source of this ViewedArticle.


        :param source: The source of this ViewedArticle.
        :type: str
        """

        self._source = source

    @property
    def id(self):
        """
        Gets the id of this ViewedArticle.


        :return: The id of this ViewedArticle.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ViewedArticle.


        :param id: The id of this ViewedArticle.
        :type: int
        """

        self._id = id

    @property
    def asset_id(self):
        """
        Gets the asset_id of this ViewedArticle.


        :return: The asset_id of this ViewedArticle.
        :rtype: int
        """
        return self._asset_id

    @asset_id.setter
    def asset_id(self, asset_id):
        """
        Sets the asset_id of this ViewedArticle.


        :param asset_id: The asset_id of this ViewedArticle.
        :type: int
        """

        self._asset_id = asset_id

    @property
    def views(self):
        """
        Gets the views of this ViewedArticle.


        :return: The views of this ViewedArticle.
        :rtype: int
        """
        return self._views

    @views.setter
    def views(self, views):
        """
        Sets the views of this ViewedArticle.


        :param views: The views of this ViewedArticle.
        :type: int
        """

        self._views = views

    @property
    def des_facet(self):
        """
        Gets the des_facet of this ViewedArticle.


        :return: The des_facet of this ViewedArticle.
        :rtype: list[str]
        """
        return self._des_facet

    @des_facet.setter
    def des_facet(self, des_facet):
        """
        Sets the des_facet of this ViewedArticle.


        :param des_facet: The des_facet of this ViewedArticle.
        :type: list[str]
        """

        self._des_facet = des_facet

    @property
    def org_facet(self):
        """
        Gets the org_facet of this ViewedArticle.


        :return: The org_facet of this ViewedArticle.
        :rtype: list[str]
        """
        return self._org_facet

    @org_facet.setter
    def org_facet(self, org_facet):
        """
        Sets the org_facet of this ViewedArticle.


        :param org_facet: The org_facet of this ViewedArticle.
        :type: list[str]
        """

        self._org_facet = org_facet

    @property
    def per_facet(self):
        """
        Gets the per_facet of this ViewedArticle.


        :return: The per_facet of this ViewedArticle.
        :rtype: list[str]
        """
        return self._per_facet

    @per_facet.setter
    def per_facet(self, per_facet):
        """
        Sets the per_facet of this ViewedArticle.


        :param per_facet: The per_facet of this ViewedArticle.
        :type: list[str]
        """

        self._per_facet = per_facet

    @property
    def geo_facet(self):
        """
        Gets the geo_facet of this ViewedArticle.


        :return: The geo_facet of this ViewedArticle.
        :rtype: list[str]
        """
        return self._geo_facet

    @geo_facet.setter
    def geo_facet(self, geo_facet):
        """
        Sets the geo_facet of this ViewedArticle.


        :param geo_facet: The geo_facet of this ViewedArticle.
        :type: list[str]
        """

        self._geo_facet = geo_facet

    @property
    def media(self):
        """
        Gets the media of this ViewedArticle.


        :return: The media of this ViewedArticle.
        :rtype: list[Media]
        """
        return self._media

    @media.setter
    def media(self, media):
        """
        Sets the media of this ViewedArticle.


        :param media: The media of this ViewedArticle.
        :type: list[Media]
        """

        self._media = media

    @property
    def uri(self):
        """
        Gets the uri of this ViewedArticle.


        :return: The uri of this ViewedArticle.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """
        Sets the uri of this ViewedArticle.


        :param uri: The uri of this ViewedArticle.
        :type: str
        """

        self._uri = uri

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
