# coding: utf-8

"""
    Most Popular

    Provides services for getting the most popular articles on NYTimes.com based on emails, shares, or views.  Get most emailed articles for the last day: ``` /emailed/1.json ```  Get most shared articles on Facebook for the last day: ``` /shared/1/facebook.json ```  Get most viewed articles for the last seven days: ``` /viewed/7.json ```  ## Example Calls ``` https://api.nytimes.com/svc/mostpopular/v2/emailed/7.json?api-key=yourkey ```  ``` https://api.nytimes.com/svc/mostpopular/v2/shared/1/facebook.json?api-key=yourkey ```  ``` https://api.nytimes.com/svc/mostpopular/v2/viewed/1.json?api-key=yourkey ``` 

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class SharedArticle(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, url=None, adx_keywords=None, subsection=None, share_count=None, count_type=None, column=None, eta_id=None, section=None, id=None, asset_id=None, nytdsection=None, byline=None, type=None, title=None, abstract=None, published_date=None, source=None, updated=None, des_facet=None, org_facet=None, per_facet=None, geo_facet=None, media=None, uri=None):
        """
        SharedArticle - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'url': 'str',
            'adx_keywords': 'str',
            'subsection': 'str',
            'share_count': 'int',
            'count_type': 'str',
            'column': 'str',
            'eta_id': 'int',
            'section': 'str',
            'id': 'int',
            'asset_id': 'int',
            'nytdsection': 'str',
            'byline': 'str',
            'type': 'str',
            'title': 'str',
            'abstract': 'str',
            'published_date': 'str',
            'source': 'str',
            'updated': 'str',
            'des_facet': 'list[str]',
            'org_facet': 'list[str]',
            'per_facet': 'list[str]',
            'geo_facet': 'list[str]',
            'media': 'list[Media]',
            'uri': 'str'
        }

        self.attribute_map = {
            'url': 'url',
            'adx_keywords': 'adx_keywords',
            'subsection': 'subsection',
            'share_count': 'share_count',
            'count_type': 'count_type',
            'column': 'column',
            'eta_id': 'eta_id',
            'section': 'section',
            'id': 'id',
            'asset_id': 'asset_id',
            'nytdsection': 'nytdsection',
            'byline': 'byline',
            'type': 'type',
            'title': 'title',
            'abstract': 'abstract',
            'published_date': 'published_date',
            'source': 'source',
            'updated': 'updated',
            'des_facet': 'des_facet',
            'org_facet': 'org_facet',
            'per_facet': 'per_facet',
            'geo_facet': 'geo_facet',
            'media': 'media',
            'uri': 'uri'
        }

        self._url = url
        self._adx_keywords = adx_keywords
        self._subsection = subsection
        self._share_count = share_count
        self._count_type = count_type
        self._column = column
        self._eta_id = eta_id
        self._section = section
        self._id = id
        self._asset_id = asset_id
        self._nytdsection = nytdsection
        self._byline = byline
        self._type = type
        self._title = title
        self._abstract = abstract
        self._published_date = published_date
        self._source = source
        self._updated = updated
        self._des_facet = des_facet
        self._org_facet = org_facet
        self._per_facet = per_facet
        self._geo_facet = geo_facet
        self._media = media
        self._uri = uri

    @property
    def url(self):
        """
        Gets the url of this SharedArticle.


        :return: The url of this SharedArticle.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this SharedArticle.


        :param url: The url of this SharedArticle.
        :type: str
        """

        self._url = url

    @property
    def adx_keywords(self):
        """
        Gets the adx_keywords of this SharedArticle.


        :return: The adx_keywords of this SharedArticle.
        :rtype: str
        """
        return self._adx_keywords

    @adx_keywords.setter
    def adx_keywords(self, adx_keywords):
        """
        Sets the adx_keywords of this SharedArticle.


        :param adx_keywords: The adx_keywords of this SharedArticle.
        :type: str
        """

        self._adx_keywords = adx_keywords

    @property
    def subsection(self):
        """
        Gets the subsection of this SharedArticle.


        :return: The subsection of this SharedArticle.
        :rtype: str
        """
        return self._subsection

    @subsection.setter
    def subsection(self, subsection):
        """
        Sets the subsection of this SharedArticle.


        :param subsection: The subsection of this SharedArticle.
        :type: str
        """

        self._subsection = subsection

    @property
    def share_count(self):
        """
        Gets the share_count of this SharedArticle.


        :return: The share_count of this SharedArticle.
        :rtype: int
        """
        return self._share_count

    @share_count.setter
    def share_count(self, share_count):
        """
        Sets the share_count of this SharedArticle.


        :param share_count: The share_count of this SharedArticle.
        :type: int
        """

        self._share_count = share_count

    @property
    def count_type(self):
        """
        Gets the count_type of this SharedArticle.


        :return: The count_type of this SharedArticle.
        :rtype: str
        """
        return self._count_type

    @count_type.setter
    def count_type(self, count_type):
        """
        Sets the count_type of this SharedArticle.


        :param count_type: The count_type of this SharedArticle.
        :type: str
        """

        self._count_type = count_type

    @property
    def column(self):
        """
        Gets the column of this SharedArticle.


        :return: The column of this SharedArticle.
        :rtype: str
        """
        return self._column

    @column.setter
    def column(self, column):
        """
        Sets the column of this SharedArticle.


        :param column: The column of this SharedArticle.
        :type: str
        """

        self._column = column

    @property
    def eta_id(self):
        """
        Gets the eta_id of this SharedArticle.


        :return: The eta_id of this SharedArticle.
        :rtype: int
        """
        return self._eta_id

    @eta_id.setter
    def eta_id(self, eta_id):
        """
        Sets the eta_id of this SharedArticle.


        :param eta_id: The eta_id of this SharedArticle.
        :type: int
        """

        self._eta_id = eta_id

    @property
    def section(self):
        """
        Gets the section of this SharedArticle.


        :return: The section of this SharedArticle.
        :rtype: str
        """
        return self._section

    @section.setter
    def section(self, section):
        """
        Sets the section of this SharedArticle.


        :param section: The section of this SharedArticle.
        :type: str
        """

        self._section = section

    @property
    def id(self):
        """
        Gets the id of this SharedArticle.


        :return: The id of this SharedArticle.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this SharedArticle.


        :param id: The id of this SharedArticle.
        :type: int
        """

        self._id = id

    @property
    def asset_id(self):
        """
        Gets the asset_id of this SharedArticle.


        :return: The asset_id of this SharedArticle.
        :rtype: int
        """
        return self._asset_id

    @asset_id.setter
    def asset_id(self, asset_id):
        """
        Sets the asset_id of this SharedArticle.


        :param asset_id: The asset_id of this SharedArticle.
        :type: int
        """

        self._asset_id = asset_id

    @property
    def nytdsection(self):
        """
        Gets the nytdsection of this SharedArticle.


        :return: The nytdsection of this SharedArticle.
        :rtype: str
        """
        return self._nytdsection

    @nytdsection.setter
    def nytdsection(self, nytdsection):
        """
        Sets the nytdsection of this SharedArticle.


        :param nytdsection: The nytdsection of this SharedArticle.
        :type: str
        """

        self._nytdsection = nytdsection

    @property
    def byline(self):
        """
        Gets the byline of this SharedArticle.


        :return: The byline of this SharedArticle.
        :rtype: str
        """
        return self._byline

    @byline.setter
    def byline(self, byline):
        """
        Sets the byline of this SharedArticle.


        :param byline: The byline of this SharedArticle.
        :type: str
        """

        self._byline = byline

    @property
    def type(self):
        """
        Gets the type of this SharedArticle.


        :return: The type of this SharedArticle.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this SharedArticle.


        :param type: The type of this SharedArticle.
        :type: str
        """

        self._type = type

    @property
    def title(self):
        """
        Gets the title of this SharedArticle.


        :return: The title of this SharedArticle.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this SharedArticle.


        :param title: The title of this SharedArticle.
        :type: str
        """

        self._title = title

    @property
    def abstract(self):
        """
        Gets the abstract of this SharedArticle.


        :return: The abstract of this SharedArticle.
        :rtype: str
        """
        return self._abstract

    @abstract.setter
    def abstract(self, abstract):
        """
        Sets the abstract of this SharedArticle.


        :param abstract: The abstract of this SharedArticle.
        :type: str
        """

        self._abstract = abstract

    @property
    def published_date(self):
        """
        Gets the published_date of this SharedArticle.


        :return: The published_date of this SharedArticle.
        :rtype: str
        """
        return self._published_date

    @published_date.setter
    def published_date(self, published_date):
        """
        Sets the published_date of this SharedArticle.


        :param published_date: The published_date of this SharedArticle.
        :type: str
        """

        self._published_date = published_date

    @property
    def source(self):
        """
        Gets the source of this SharedArticle.


        :return: The source of this SharedArticle.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """
        Sets the source of this SharedArticle.


        :param source: The source of this SharedArticle.
        :type: str
        """

        self._source = source

    @property
    def updated(self):
        """
        Gets the updated of this SharedArticle.


        :return: The updated of this SharedArticle.
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this SharedArticle.


        :param updated: The updated of this SharedArticle.
        :type: str
        """

        self._updated = updated

    @property
    def des_facet(self):
        """
        Gets the des_facet of this SharedArticle.


        :return: The des_facet of this SharedArticle.
        :rtype: list[str]
        """
        return self._des_facet

    @des_facet.setter
    def des_facet(self, des_facet):
        """
        Sets the des_facet of this SharedArticle.


        :param des_facet: The des_facet of this SharedArticle.
        :type: list[str]
        """

        self._des_facet = des_facet

    @property
    def org_facet(self):
        """
        Gets the org_facet of this SharedArticle.


        :return: The org_facet of this SharedArticle.
        :rtype: list[str]
        """
        return self._org_facet

    @org_facet.setter
    def org_facet(self, org_facet):
        """
        Sets the org_facet of this SharedArticle.


        :param org_facet: The org_facet of this SharedArticle.
        :type: list[str]
        """

        self._org_facet = org_facet

    @property
    def per_facet(self):
        """
        Gets the per_facet of this SharedArticle.


        :return: The per_facet of this SharedArticle.
        :rtype: list[str]
        """
        return self._per_facet

    @per_facet.setter
    def per_facet(self, per_facet):
        """
        Sets the per_facet of this SharedArticle.


        :param per_facet: The per_facet of this SharedArticle.
        :type: list[str]
        """

        self._per_facet = per_facet

    @property
    def geo_facet(self):
        """
        Gets the geo_facet of this SharedArticle.


        :return: The geo_facet of this SharedArticle.
        :rtype: list[str]
        """
        return self._geo_facet

    @geo_facet.setter
    def geo_facet(self, geo_facet):
        """
        Sets the geo_facet of this SharedArticle.


        :param geo_facet: The geo_facet of this SharedArticle.
        :type: list[str]
        """

        self._geo_facet = geo_facet

    @property
    def media(self):
        """
        Gets the media of this SharedArticle.


        :return: The media of this SharedArticle.
        :rtype: list[Media]
        """
        return self._media

    @media.setter
    def media(self, media):
        """
        Sets the media of this SharedArticle.


        :param media: The media of this SharedArticle.
        :type: list[Media]
        """

        self._media = media

    @property
    def uri(self):
        """
        Gets the uri of this SharedArticle.


        :return: The uri of this SharedArticle.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """
        Sets the uri of this SharedArticle.


        :param uri: The uri of this SharedArticle.
        :type: str
        """

        self._uri = uri

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
